<?php

declare(strict_types=1);

/**
 * @file
 * Provides a substitutoo location entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function sub_location_theme(): array {
  return [
    'sub_location' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for substitutoo location templates.
 *
 * Default template: sub-location.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the substitutoo location information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_sub_location(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function sub_location_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish substitutoo locations.
      $storage = \Drupal::entityTypeManager()->getStorage('sub_location');
      $sub_location_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($sub_location_ids) as $sub_location) {
        $sub_location->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize substitutoo locations.
      $storage = \Drupal::entityTypeManager()->getStorage('sub_location');
      $sub_location_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($sub_location_ids) as $sub_location) {
        $sub_location->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function sub_location_user_predelete(UserInterface $account): void {
  // Delete substitutoo locations that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('sub_location');
  $sub_location_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($sub_location_ids)
  );
}

// /**
//  * Implements hook_entity_type_build().
//  */
// function sub_location_entity_type_alter(array &$entity_types) {
//   if (isset($entity_types['sub_location'])) {
//     $entity_types['sub_location']
//       ->setFormClass(
//         'manager_form',
//       'Drupal\sub_location\Form\SubstitutooLocationForm'
//       );
//   }
// }
