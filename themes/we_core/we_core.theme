<?php
/*
 * @file
 * Functions to support theming in the we core theme.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess_html().
 */
function we_core_preprocess_html(&$variables) {
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $path_alias_parts = explode('/', $path_alias);
  foreach ($path_alias_parts as $alias_part) {
    $variables['attributes']['class'][] = 'path-' . Html::cleanCssIdentifier($alias_part);
  }

  $variables['language']= \Drupal::languageManager()->getCurrentLanguage()->getId();
}

/**
 * Implements hook_preprocess_page().
 */
function we_core_preprocess_page(&$variables) {
  $site_config = Drupal::config('system.site');
  $variables['logo'] = theme_get_setting('logo.url');
  $variables['site_name'] = $site_config->get('name');
  $variables['hide_site_name'] = TRUE;
  $variables['site_slogan'] = $site_config->get('slogan');
  $variables['hide_site_slogan'] = TRUE;

  $variables['main_content_width'] = 12;
  if (!empty($variables['page']['sidebar_first'])) {
    $variables['main_content_width'] = 9;
    $variables['sidebar_first_width'] = 3;
  }
  if (!empty($variables['page']['sidebar_second'])) {
    $variables['main_content_width'] = 9;
    $variables['sidebar_second_width'] = 3;

  }
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['main_content_width'] = 6;
    $variables['sidebar_first_width'] = 3;
    $variables['sidebar_second_width'] = 3;
  }
}

/**
 * Implements template_preprocess_links().
 */
function we_core_preprocess_links(&$variables) {
  if (!empty($variables['links'])) {
    foreach ($variables['links'] as $key => $value) {
      if (!is_numeric($key)) {
        $class = Html::getClass($key);
        $variables['links'][$key]['attributes']->addClass($class);
      }
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function we_core_element_info_alter(array &$info) {
  if (array_key_exists('text_format', $info)) {
    $info['text_format']['#process'][] = 'we_core_process_text_format';
  }
}

/**
 * #process callback, for adding classes to filter components.
 *
 * @param array $element
 *   Render array for the text_format element.
 *
 * @return array
 *   Text_format element with the filter classes added.
 */
function we_core_process_text_format(array $element) {
  $element['format']['#attributes']['class'][] = 'filter-wrapper';
  $element['format']['guidelines']['#attributes']['class'][] = 'filter-guidelines';
  $element['format']['format']['#attributes']['class'][] = 'filter-list';
  $element['format']['help']['#attributes']['class'][] = 'filter-help';

  return $element;
}

/**
 * Implements hook_preprocess_image_widget().
 */
function we_core_preprocess_image_widget(&$variables) {
  if (!empty($variables['element']['fids']['#value'])) {
    $file = reset($variables['element']['#files']);
    $variables['data']['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
  }
}
